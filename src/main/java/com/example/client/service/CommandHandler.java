package com.example.client.service;

import com.example.client.mapper.Mapper;
import com.example.client.model.ProxyModel;
import com.example.client.model.RequestToVm;
import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.websocket.Session;
import org.openqa.selenium.Proxy;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.firefox.FirefoxProfile;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestBody;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.Base64;
import java.util.Map;

@Service
public class CommandHandler {
    @Autowired
    private Mapper myMapper;
    @Autowired
    private SenderMessagesToServer sender;

    public void handle(@RequestBody RequestToVm request, Session session) {
        try {
            if(request==null){
                sender.sendMessageToServer("requst is empty", session);
            }

            switch (request.getTypeOfCommand()) {
                case VIEW_ONLY -> {
                    System.out.println("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä: " + request.getUrl());
                    startBrowserAndSearch(request);
                }
                case VIEW_LIKE -> {
                    System.out.println("üëç –õ–∞–π–∫ + –ü—Ä–æ—Å–º–æ—Ç—Ä: " + request.getUrl());
                    startBrowserAndSearch(request);
                }
                case VIEW_COMMENT -> {
                    System.out.println("üí¨ –ö–æ–º–º–µ–Ω—Ç + –ü—Ä–æ—Å–º–æ—Ç—Ä: " + request.getUrl());
                    startBrowserAndSearch(request);
                }
                case STOP -> {
                    System.out.println("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞");
                    System.exit(0);
                }
                default -> System.out.println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public void startBrowserAndSearch(RequestToVm request) {
        WebDriver driver = fireFoxDriver(request);
        if (driver != null) {
            try {
                // –ñ–¥–µ–º, –ø–æ–∫–∞ –±—Ä–∞—É–∑–µ—Ä –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
                Thread.sleep(3000);

                // –°–æ–∑–¥–∞–µ–º Robot –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
                Robot robot = new Robot();

                // –ù–∞–∂–∏–º–∞–µ–º Ctrl+L –¥–ª—è —Ñ–æ–∫—É—Å–∞ –Ω–∞ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
                robot.keyPress(KeyEvent.VK_CONTROL);
                robot.keyPress(KeyEvent.VK_L);
                robot.keyRelease(KeyEvent.VK_L);
                robot.keyRelease(KeyEvent.VK_CONTROL);
                robot.delay(500); // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —Ñ–æ–∫—É—Å–∞

                // –í–≤–æ–¥–∏–º "youtube" –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
                String searchText = "youtube";
                for (char c : searchText.toCharArray()) {
                    typeCharacter(robot, c);
                }

                // –ù–∞–∂–∏–º–∞–µ–º Enter
                robot.keyPress(KeyEvent.VK_ENTER);
                robot.keyRelease(KeyEvent.VK_ENTER);

                // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                Thread.sleep(5000);

                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
                driver.quit();
            } catch (Exception e) {
                System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–∞–π—Ç–∞: " + e.getMessage());
                driver.quit();
            }
        }
    }

    public WebDriver fireFoxDriver(RequestToVm request){
        try {
            System.setProperty("webdriver.gecko.driver", "/snap/bin/geckodriver");

            ProxyModel proxyModel = request.getProxyModel();
            // –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Ñ–∏–ª—å Firefox
            FirefoxProfile profile = new FirefoxProfile();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
            Proxy proxy = new Proxy();
            proxy.setHttpProxy(proxyModel.getHost() + ":" + proxyModel.getPort());

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Proxy-Authorization
            String auth = proxyModel.getUsername() + ":" + proxyModel.getPassword();
            String encodedAuth = Base64.getEncoder().encodeToString(auth.getBytes());
            profile.setPreference("network.proxy.http_header", "Proxy-Authorization");
            profile.setPreference("network.proxy.http_header_value", "Basic " + encodedAuth);

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Firefox
            FirefoxOptions options = new FirefoxOptions();
            options.setBinary("/usr/bin/firefox");
            options.setProxy(proxy);
            options.setProfile(profile);

            // –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞
            WebDriver driver = new FirefoxDriver(options);
            driver.manage().window().fullscreen(); // –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
            return driver;
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏: " + e.getMessage());
            return null;
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–≤–æ–¥–∞ —Å–∏–º–≤–æ–ª–æ–≤
    private void typeCharacter(Robot robot, char c) {
        int keyCode = KeyEvent.getExtendedKeyCodeForChar(c);
        if (keyCode != KeyEvent.VK_UNDEFINED) {
            robot.keyPress(keyCode);
            robot.keyRelease(keyCode);
            robot.delay(100); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –Ω–∞–∂–∞—Ç–∏—è–º–∏
        } else {
            System.err.println("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª: " + c);
        }
    }
}
